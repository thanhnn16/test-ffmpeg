// Hàm chuyển đổi số giây thành định dạng thời gian ASS (H:MM:SS.cs)
function formatAssTime(seconds) {
    seconds = parseFloat(seconds);
    const totalCentiseconds = Math.floor(seconds * 100);
    const cs = totalCentiseconds % 100;
    const totalSeconds = Math.floor(totalCentiseconds / 100);
    const s = totalSeconds % 60;
    const totalMinutes = Math.floor(totalSeconds / 60);
    const m = totalMinutes % 60;
    const h = Math.floor(totalMinutes / 60);
    return `${h}:${padZero(m)}:${padZero(s)}.${padZero(cs, 2)}`;
  }
  
  // Hàm thêm số 0 vào đầu
  function padZero(num, length = 2) {
    return num.toString().padStart(length, '0');
  }
  
  // Hàm chuyển đổi groups thành ASS dialogue events với hiệu ứng karaoke nâng cao
  function convertGroupsToASS(groups, words) {
    return groups.map((group) => {
      let karaokeLine = "";
      // Duyệt qua các từ từ startIndex đến endIndex trong mảng words
      let startIndex = group.startIndex || 0;
      let endIndex = group.endIndex || 0;
      
      for (let i = startIndex; i <= endIndex; i++) {
        const wordObj = words[i];
        // Tính thời lượng của từ tính theo centisecond (1 giây = 100 cs)
        const duration = Math.round((wordObj.end - wordObj.start) * 100);
        
        // Sử dụng hiệu ứng karaoke nâng cao với màu sắc chuyển động
        // \k<duration> định nghĩa thời gian hiệu ứng
        // \c&H<bbggrr>& định nghĩa màu chữ (định dạng là bbggrr - blue, green, red)
        // \3c&H<bbggrr>& định nghĩa màu viền
        // \4c&H<bbggrr>& định nghĩa màu bóng đổ
        karaokeLine += `{\\k${duration}\\c&H0CF4FF&\\3c&H000000&\\4c&H000000&}${wordObj.word} `;
      }
      
      karaokeLine = karaokeLine.trim();
      
      // Thêm tag đặc biệt để áp dụng hiệu ứng karaoke
      // \t định nghĩa một hiệu ứng biến đổi trong khoảng thời gian
      // Định dạng: \t(<start_time>,<end_time>,<transform_tags>)
      const transformLine = `{\\blur3\\bord2\\shad1\\fscx110\\fscy110\\t(0,50,\\blur0\\bord1.5\\fscx100\\fscy100)}${karaokeLine}`;
      
      return {
        id: group.index,
        startTime: formatAssTime(group.start),
        endTime: formatAssTime(group.end),
        text: transformLine
      };
    });
  }
  
  // Hàm tạo header cho file ASS
  function generateAssHeader() {
    return `[Script Info]
  ; Script generated by Whisper to ASS converter
  Title: Whisper to ASS
  ScriptType: v4.00+
  Collisions: Normal
  PlayResX: 1920
  PlayResY: 1080
  Timer: 100.0000
  WrapStyle: 0
  
  [V4+ Styles]
  Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
  Style: Default,Arial,54,&H00FFFFFF,&H000000FF,&H00000000,&H80000000,-1,0,0,0,100,100,0,0,1,2.5,1.5,2,10,10,30,1
  Style: Title,Arial Black,64,&H00FFFFFF,&H000000FF,&H00000000,&H80000000,-1,0,0,0,100,100,0,0,1,3,2,8,10,10,10,1
  
  [Events]
  Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text`;
  }
  
  // Hàm tạo chuỗi ASS từ các dialogue events
  function generateAssString(assObjects) {
    const header = generateAssHeader();
    
    // Tạo tiêu đề chính giữa màn hình
    const titleLine = `Dialogue: 0,0:00:00.00,0:00:05.00,Title,,0,0,0,,{\\fad(300,300)\\c&H00FFFF&\\3c&H000000&\\blur0.8}VIDEO TIẾNG VIỆT`;
    
    const dialogueLines = assObjects.map(entry => {
      // Thêm hiệu ứng Fade In/Out cho từng đoạn phụ đề
      return `Dialogue: 0,${entry.startTime},${entry.endTime},Default,,0,0,0,,{\\fad(200,200)}${entry.text}`;
    }).join('\n');
    
    return `${header}\n${titleLine}\n${dialogueLines}`;
  }
  
  // Hàm xử lý whisper transcription thành groups
  function processWhisperGroups(input) {
    if (!input || typeof input !== "object" || !input.words || !Array.isArray(input.words) || input.words.length === 0) {
      throw new Error('Dữ liệu đầu vào không hợp lệ');
    }
  
    const words = input.words;
    const fullText = input.text;
  
    let groups = [];
    let currentGroup = {
      text: "",
      start: words[0].start,
      end: null,
      startIndex: 0,
      endIndex: null,
      index: 1,
    };
  
    let lastPosition = 0;
    let charCount = 0;
  
    for (let i = 0; i < words.length; i++) {
      const wordObj = words[i];
      
      // Thêm từ vào nhóm hiện tại
      if (currentGroup.text) {
        currentGroup.text += " " + wordObj.word;
        charCount += wordObj.word.length + 1;
      } else {
        currentGroup.text = wordObj.word;
        charCount += wordObj.word.length;
      }
      
      currentGroup.end = wordObj.end;
      currentGroup.endIndex = i;
      
      // Xác định vị trí từ trong fullText
      const wordPos = fullText.indexOf(wordObj.word, lastPosition);
      if (wordPos !== -1) {
        lastPosition = wordPos + wordObj.word.length;
        
        const nextChar = fullText.charAt(lastPosition);
        const isPunctuation = /[\.,;!?:]/.test(nextChar);
        
        if (isPunctuation && charCount >= 3) {
          groups.push({ ...currentGroup });
          
          if (i + 1 < words.length) {
            currentGroup = {
              text: "",
              start: words[i + 1].start,
              end: null,
              startIndex: i + 1,
              endIndex: null,
              index: groups.length + 1,
            };
            charCount = 0;
          } else {
            currentGroup = null;
            break;
          }
        } else if (isPunctuation && charCount < 3) {
          lastPosition++; // Bỏ qua dấu câu ngắn
        }
      }
    }
  
    if (currentGroup && currentGroup.text) {
      groups.push({ ...currentGroup });
    }
  
    return groups;
  }
  
  // Hàm chuyển đổi SRT sang dữ liệu words/groups phù hợp cho ASS với hiệu ứng karaoke
  function convertSrtToWords(srtContent) {
    if (!srtContent) return null;
    
    // Tách các đoạn phụ đề
    const subtitleBlocks = srtContent.trim().split(/\r?\n\r?\n/);
    
    let words = [];
    let combinedText = "";
    
    // Xử lý từng đoạn phụ đề
    subtitleBlocks.forEach((block, blockIndex) => {
      const lines = block.split(/\r?\n/);
      if (lines.length >= 3) {
        // Phân tích định dạng thời gian
        const timeMatch = lines[1].match(/(\d{2}:\d{2}:\d{2},\d{3}) --> (\d{2}:\d{2}:\d{2},\d{3})/);
        if (timeMatch) {
          const startTime = convertSrtTimeToSeconds(timeMatch[1]);
          const endTime = convertSrtTimeToSeconds(timeMatch[2]);
          
          // Phân tích nội dung phụ đề
          const text = lines.slice(2).join(" ");
          combinedText += text + " ";
          
          // Chia thành các từ riêng lẻ
          const textWords = text.split(/\s+/);
          const wordDuration = (endTime - startTime) / textWords.length;
          
          // Tạo đối tượng word cho mỗi từ
          textWords.forEach((word, i) => {
            const wordStartTime = startTime + wordDuration * i;
            const wordEndTime = i === textWords.length - 1 ? endTime : startTime + wordDuration * (i + 1);
            
            words.push({
              word,
              start: wordStartTime,
              end: wordEndTime
            });
          });
        }
      }
    });
    
    return {
      words,
      text: combinedText.trim()
    };
  }
  
  // Hàm chuyển đổi định dạng thời gian SRT sang số giây
  function convertSrtTimeToSeconds(srtTime) {
    const match = srtTime.match(/(\d{2}):(\d{2}):(\d{2}),(\d{3})/);
    if (match) {
      const hours = parseInt(match[1], 10);
      const minutes = parseInt(match[2], 10);
      const seconds = parseInt(match[3], 10);
      const milliseconds = parseInt(match[4], 10);
      
      return hours * 3600 + minutes * 60 + seconds + milliseconds / 1000;
    }
    return 0;
  }
  
  // Hàm chuyển đổi SRT thành ASS
  function convertSrtToAss(srtContent) {
    try {
      // Chuyển đổi SRT thành dữ liệu words
      const inputData = convertSrtToWords(srtContent);
      
      if (!inputData) {
        throw new Error('Không thể chuyển đổi file SRT');
      }
      
      // Xử lý dữ liệu thành groups
      const groups = processWhisperGroups(inputData);
      
      // Chuyển đổi groups thành ASS objects với hiệu ứng karaoke
      const assObjects = convertGroupsToASS(groups, inputData.words);
      
      // Tạo chuỗi ASS
      const assString = generateAssString(assObjects);
      
      return assString;
    } catch (error) {
      console.error('Lỗi khi xử lý dữ liệu:', error.message);
      return null;
    }
  }
  
  // Hàm chính để sử dụng trong n8n hoặc chạy độc lập
  function main() {
    try {
      // Kiểm tra xem có đang chạy trong môi trường n8n không
      const isN8n = typeof $input !== 'undefined';
      
      if (isN8n) {
        // Lấy dữ liệu đầu vào từ $input.item.json
        const input = $input.item.json;
        
        if (!input) {
          return [{ json: { error: 'Dữ liệu đầu vào không hợp lệ' } }];
        }
        
        // Xử lý dữ liệu Whisper hoặc SRT
        let result;
        
        if (input.srtContent) {
          // Xử lý nếu là SRT content
          result = convertSrtToAss(input.srtContent);
        } else if (input.words) {
          // Xử lý dữ liệu Whisper thành groups
          const groups = processWhisperGroups(input);
          
          // Chuyển đổi groups thành ASS objects với hiệu ứng karaoke
          const assObjects = convertGroupsToASS(groups, input.words);
          
          // Tạo chuỗi ASS
          result = generateAssString(assObjects);
        } else {
          return [{ json: { error: 'Định dạng dữ liệu đầu vào không được hỗ trợ' } }];
        }
        
        return [{
          json: {
            assContent: result
          }
        }];
      } else {
        // Chạy độc lập, đọc file từ tham số dòng lệnh hoặc đường dẫn mặc định
        const fs = require('fs');
        const srtPath = process.argv[2] || 'subtitle.srt';
        const outputPath = process.argv[3] || 'subtitle.ass';
        
        if (!fs.existsSync(srtPath)) {
          console.error(`File không tồn tại: ${srtPath}`);
          process.exit(1);
        }
        
        const srtContent = fs.readFileSync(srtPath, 'utf-8');
        const assContent = convertSrtToAss(srtContent);
        
        if (assContent) {
          fs.writeFileSync(outputPath, assContent, 'utf-8');
          console.log(`Đã chuyển đổi thành công: ${outputPath}`);
        } else {
          console.error('Không thể chuyển đổi file SRT sang ASS');
          process.exit(1);
        }
      }
    } catch (error) {
      console.error('Lỗi:', error.message);
      if (typeof $input !== 'undefined') {
        return [{ json: { error: error.message } }];
      } else {
        process.exit(1);
      }
    }
  }
  
  // Chạy hàm main nếu là mô-đun chính
  if (typeof module !== 'undefined' && !module.parent) {
    main();
  } else if (typeof $input !== 'undefined') {
    // Gọi hàm chính trong môi trường n8n
    return main();
  }
  